function prob = P_RandomBlock(d,t,h,w,a)
% PROBABILITY OF AN AP BEING BLOCKED BY ANY RANDOM BODY
%
% INPUTS:
%   d - 2D-distance from the AP to the UE
%   t - distance from the top of the body to the UE
%   h - height from the UE to the AP
%   w - body width
%   a - half-side size of the square venue
% OUTPUT:
%   prob - probability of blockage

indef_int = @(x,a,w) ...
    (w.^2./(16.*pi.*a.^2)) .* ...
    (csc(x./2).^4 .* (...
        32*a*w - 48.*a.^2.*pi.*x + 48.*a.*w.*log(sin(x./2)) + ...
        16.*a.*w.*cos(2.*x).*log(sin(x./2)) + ...
        cos(x).*(-32.*a.*w + 48.*a.^2.*pi.*x - ...
                 3.*w.^3.*x - 64.*a.*w.*log(sin(x./2))) - ...
        48.*a.^2.*pi.*sin(x) + ...
        w.^3.*sin(x) + ...
        16.*a.*w.*x.*sin(x) + ...
        24.*a.^2.*pi.*sin(2.*x) - ...
        w.^3.*sin(2.*x) + ...
        8.*a.*w.*x.*sin(2.*x)) ...
    )./(192.*a.^2);

phi = @(b,w) 2.*atan(((2.*b)./w).^-1);
lower_limit = phi(d.*t./h,w);

prob = indef_int(pi,a,w) - indef_int( lower_limit, a, w );

%     % blocking angle
%      phi = @(b,w) 2.*atan(((2.*b)./w).^-1);
%      inv_phi = @(p,w) w./(2.*tan(p/2));
%      
%     % CDF of angle approximation
%     Ft = @(t) t./(2*pi);
%     % PDF of blocking angle
%     fl1 = @(p,w,a) ...
%         ( - 2.*pi.*inv_phi(p,w)./(2.*a).^2 ...
%           + 8.*(inv_phi(p,w)).^2./(2.*a).^3 ...
%           - 2.*(inv_phi(p,w)).^3./(2.*a).^4 ).* ...
%         ( w./(2.*(cos(p)-1)) );
%     
%     lower_limit = phi(d.*t./h,w);
%     prob = integral(@(p) Ft(p).*fl1(p,w,a),lower_limit,pi);
end